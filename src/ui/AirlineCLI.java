package ui;

import airline.*;
import java.util.*;
import java.util.stream.Collectors;

public class AirlineCLI {
    private final Airline airline = new Airline();
    private final Scanner scanner = new Scanner(System.in);

    public void run() {
        seedPlanes();
        boolean running = true;
        while (running) {
            printMenu();
            String input = scanner.nextLine();
            switch (input) {
                case "1" -> addPlane();
                case "2" -> removePlane();
                case "3" -> editPlane();
                case "4" -> listPlanes();
                case "5" -> searchPlane();
                case "6" -> sortPlanes();
                case "7" -> running = false;
                default -> System.out.println("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.");
            }
        }
    }

    private void printMenu() {
        System.out.println("""
                \n=== –ú–µ–Ω—é ===
                1. –î–æ–¥–∞—Ç–∏ –ª—ñ—Ç–∞–∫
                2. –í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ—Ç–∞–∫
                3. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª—ñ—Ç–∞–∫
                4. –í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –ª—ñ—Ç–∞–∫–∏
                5. –ü–æ—à—É–∫ –ª—ñ—Ç–∞–∫–∞
                6. –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ª—ñ—Ç–∞–∫—ñ–≤
                7. –í–∏—Ö—ñ–¥
                """);
        System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");
    }

    private void seedPlanes() {
        airline.addPlane(new PassengerPlane("Boeing 737", 160, 18.0, 3000, 2500));
        airline.addPlane(new CargoPlane("Antonov An-124", 150.0, 4800, 12000));
        airline.addPlane(new BusinessJet("Gulfstream G650", 14, 3.5, 12000, 1200));
        airline.addPlane(new LightPlane("Cessna 172", 4, 0.5, 1200, 400));
        airline.addPlane(new Fighter("F-22 Raptor", 2.0, 3000, 5000));
        airline.addPlane(new Bomber("B-2 Spirit", 20.0, 11000, 8000));
        airline.addPlane(new AttackAircraft("Su-25", 2.5, 1850, 2500));
        airline.addPlane(new Interceptor("MiG-25", 3.0, 1450, 7500));
    }

    private void addPlane() {
        try {
            System.out.print("–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –ª—ñ—Ç–∞–∫–∞ (1 - –ü–∞—Å–∞–∂–∏—Ä—Å—å–∫–∏–π, 2 - –í–∞–Ω—Ç–∞–∂–Ω–∏–π): ");
            String type = scanner.nextLine();

            System.out.print("–ú–æ–¥–µ–ª—å: ");
            String model = scanner.nextLine();
            int capacity = 0;

            if (type.equals("1")) {
                System.out.print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤: ");
                capacity = Integer.parseInt(scanner.nextLine());
            }

            System.out.print("–í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (—Ç–æ–Ω–Ω): ");
            double cargoCapacity = Double.parseDouble(scanner.nextLine());

            System.out.print("–î–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É (–∫–º): ");
            int range = Integer.parseInt(scanner.nextLine());

            System.out.print("–°–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–ª—å–Ω–æ–≥–æ (–ª/–≥–æ–¥): ");
            double fuel = Double.parseDouble(scanner.nextLine());

            Plane plane = type.equals("1")
                    ? new PassengerPlane(model, capacity, cargoCapacity, range, fuel)
                    : new CargoPlane(model, cargoCapacity, range, fuel);

            airline.addPlane(plane);
            System.out.println("‚úÖ –õ—ñ—Ç–∞–∫ –¥–æ–¥–∞–Ω–æ.");
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
    }

    private void removePlane() {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –ª—ñ—Ç–∞–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
        String model = scanner.nextLine();
        boolean success = airline.removePlane(model);
        if (success) System.out.println("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ.");
        else System.out.println("‚ùå –õ—ñ—Ç–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }

    private void editPlane() {
        try {
            System.out.print("–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –ª—ñ—Ç–∞–∫–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ");
            String model = scanner.nextLine();
            Plane plane = airline.findPlaneByModel(model);
            if (plane == null) {
                System.out.println("‚ùå –õ—ñ—Ç–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            System.out.print("–ù–æ–≤–∞ –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å: ");
            double cargo = Double.parseDouble(scanner.nextLine());

            System.out.print("–ù–æ–≤–∞ –¥–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É: ");
            int range = Integer.parseInt(scanner.nextLine());

            System.out.print("–ù–æ–≤–µ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–ª—å–Ω–æ–≥–æ: ");
            double fuel = Double.parseDouble(scanner.nextLine());

            if (plane instanceof PassengerPlane) {
                System.out.print("–ù–æ–≤–∞ –º—ñ—Å—Ç–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤: ");
                int cap = Integer.parseInt(scanner.nextLine());
                airline.removePlane(model);
                airline.addPlane(new PassengerPlane(model, cap, cargo, range, fuel));
            } else {
                airline.removePlane(model);
                airline.addPlane(new CargoPlane(model, cargo, range, fuel));
            }

            System.out.println("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ.");
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
    }

    private void listPlanes() {
        System.out.println("=== –°–ø–∏—Å–æ–∫ –ª—ñ—Ç–∞–∫—ñ–≤ ===");
        for (Plane p : airline.getPlanes()) {
            System.out.println(p);
        }
    }

    private void searchPlane() {
        System.out.println("""
            1. –ü–æ—à—É–∫ –∑–∞ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞–∑–≤–∏
            2. –ü–æ—à—É–∫ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            """);
        System.out.print("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—à—É–∫—É: ");
        String choice = scanner.nextLine();
        if (choice.equals("1")) {
            simpleSearch();
        } else if (choice.equals("2")) {
            advancedSearch();
        } else {
            System.out.println("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä.");
        }
    }

    private void simpleSearch() {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –¥–ª—è –ø–æ—à—É–∫—É: ");
        String keyword = scanner.nextLine().toLowerCase();

        List<Plane> found = airline.getPlanes().stream()
                .filter(p -> p.getModel().toLowerCase().contains(keyword))
                .toList();

        if (found.isEmpty()) {
            System.out.println("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ª—ñ—Ç–∞–∫–∞.");
        } else {
            System.out.println("üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –ª—ñ—Ç–∞–∫–∏:");
            found.forEach(System.out::println);
        }
    }

    private void advancedSearch() {
        try {
            System.out.println("=== –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ ===");

            System.out.print("–ß–∞—Å—Ç–∏–Ω–∞ –º–æ–¥–µ–ª—ñ (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º): ");
            String keyword = scanner.nextLine().trim().toLowerCase();

            System.out.print("–ú—ñ–Ω. –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ (–∞–±–æ -1): ");
            int minCap = Integer.parseInt(scanner.nextLine());

            System.out.print("–ú–∞–∫—Å. –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ (–∞–±–æ -1): ");
            int maxCap = Integer.parseInt(scanner.nextLine());

            System.out.print("–ú—ñ–Ω. –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (–∞–±–æ -1): ");
            double minCargo = Double.parseDouble(scanner.nextLine());

            System.out.print("–ú–∞–∫—Å. –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (–∞–±–æ -1): ");
            double maxCargo = Double.parseDouble(scanner.nextLine());

            System.out.print("–ú—ñ–Ω. –¥–∞–ª—å–Ω—ñ—Å—Ç—å (–∞–±–æ -1): ");
            int minRange = Integer.parseInt(scanner.nextLine());

            System.out.print("–ú–∞–∫—Å. –¥–∞–ª—å–Ω—ñ—Å—Ç—å (–∞–±–æ -1): ");
            int maxRange = Integer.parseInt(scanner.nextLine());

            System.out.print("–ú—ñ–Ω. —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–ª—å–Ω–æ–≥–æ (–∞–±–æ -1): ");
            double minFuel = Double.parseDouble(scanner.nextLine());

            System.out.print("–ú–∞–∫—Å. —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–ª—å–Ω–æ–≥–æ (–∞–±–æ -1): ");
            double maxFuel = Double.parseDouble(scanner.nextLine());

            String[] availableTypes = {
                    "Passenger", "Cargo", "Business Jet", "Light Plane",
                    "Fighter", "Bomber", "Attack Aircraft", "Interceptor"
            };

            System.out.println("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –ª—ñ—Ç–∞–∫—ñ–≤ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –≤—Å—ñ—Ö):");
            for (int i = 0; i < availableTypes.length; i++) {
                System.out.printf("%d. %s%n", i + 1, availableTypes[i]);
            }
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1 3 6): ");
            String typesInput = scanner.nextLine().trim();

            final Set<String> selectedTypes = new HashSet<>();

            if (!typesInput.isEmpty()) {
                String[] tokens = typesInput.split("\\s+");
                for (String token : tokens) {
                    try {
                        int index = Integer.parseInt(token);
                        if (index >= 1 && index <= availableTypes.length) {
                            selectedTypes.add(availableTypes[index - 1].toLowerCase());
                        } else {
                            System.out.printf("‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –ø–æ–∑–∞ –º–µ–∂–∞–º–∏: %s (—ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è)%n", token);
                        }
                    } catch (NumberFormatException e) {
                        System.out.printf("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: %s (—ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è)%n", token);
                    }
                }
            }

            List<Plane> results = airline.getPlanes().stream()
                    .filter(p -> keyword.isEmpty() || p.getModel().toLowerCase().contains(keyword))
                    .filter(p -> minCap < 0 || p.getCapacity() >= minCap)
                    .filter(p -> maxCap < 0 || p.getCapacity() <= maxCap)
                    .filter(p -> minCargo < 0 || p.getCargoCapacity() >= minCargo)
                    .filter(p -> maxCargo < 0 || p.getCargoCapacity() <= maxCargo)
                    .filter(p -> minRange < 0 || p.getRange() >= minRange)
                    .filter(p -> maxRange < 0 || p.getRange() <= maxRange)
                    .filter(p -> minFuel < 0 || p.getFuelConsumption() >= minFuel)
                    .filter(p -> maxFuel < 0 || p.getFuelConsumption() <= maxFuel)
                    .filter(p -> selectedTypes.isEmpty() || selectedTypes.contains(p.getType().toLowerCase()))
                    .toList();

            if (results.isEmpty()) {
                System.out.println("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            } else {
                System.out.println("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:");
                results.forEach(System.out::println);
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
    }

    private void sortPlanes() {
        System.out.println("""
            –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ (—Å–ø–∞–¥–∞–Ω–Ω—è–º):
            1. –î–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É
            2. –ú—ñ—Å—Ç–∫—ñ—Å—Ç—å
            3. –í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å
            4. –°–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–ª—å–Ω–æ–≥–æ
            """);
        System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");
        String choice = scanner.nextLine();
        List<Plane> sorted = switch (choice) {
            case "1" -> airline.getPlanes().stream()
                    .sorted(Comparator.comparingInt(Plane::getRange).reversed()).toList();
            case "2" -> airline.getPlanes().stream()
                    .sorted(Comparator.comparingInt(Plane::getCapacity).reversed()).toList();
            case "3" -> airline.getPlanes().stream()
                    .sorted(Comparator.comparingDouble(Plane::getCargoCapacity).reversed()).toList();
            case "4" -> airline.getPlanes().stream()
                    .sorted(Comparator.comparingDouble(Plane::getFuelConsumption).reversed()).toList();
            default -> {
                System.out.println("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä.");
                yield List.of();
            }
        };

        System.out.println("=== –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ===");
        sorted.forEach(System.out::println);
    }
}
